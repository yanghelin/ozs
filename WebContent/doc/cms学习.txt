
页面框架部分：
	用户的菜单是在user_left.html文件中控制的。


后台if判断方法：

前台if判断方法：
	[#if meeting.type ??] ${meeting.type}[/#if]

标签代表含义：
	<@s.m "">：读取变量数据
	<#assign usernameExist><@s.m "error.usernameExist"/></#assign>
	list?size gt 0	判断list长度是否为0
	<#if item[listKey]?string==value?string>	从对象item中取出字段listKey，然后字符串之间的比较

=============================列表页===============================
1、<@p.table value=pagination;cmsUser,i,has_next><#rt/></@p.table>
		类似于forEach循环
		pagination：是后台查询的带分页的列表数据
		cmsUser：pagination的列表中的一个对象。
		i：遍历的序号
		has_next：【猜测】是否还有下一个对象
2、<@p.column code="cmsUser.rank" align="center">${cmsUser.rank}</@p.column><#t/>
		每列数据的展示方式
		code：读取该字段的属性值
		${cmsUser.rank}：读取该字段的属性值
		<#t/>：换行
3、<@p.column code="cmsUser.role" align="center"><#list cmsUser.roles as r><div style="float:left;padding-right:3px">${r.name}</div></#list><div style="clear:both"></div></@p.column><#t/>
		每列数据的展示方式
		<#list cmsUser.roles as r>：对cmsUser对象下的list集合roles进行遍历
4、整个列表需要被form标签包含在内，并且需要有页码的隐藏域
	如：<form id="tableForm" method="post">
		<input type="hidden" name="pageNo" value="${pageNo!}"/>

5、整个列表的查询页面需要被另一个form包含在内
	如：<form action="v_list.do" method="post">
6、截取字符串，并用...代替
	<@text_cut s=content.title?html len=25 append="..."/>


================================================================


=============================添加页==============================
添加页面的标签：

<@p.form		等价于form标签，其他属性相同
<@p.text		等价于<input type="text">标签，其他属性：
				label		绑定对象和属性关系；
				maxlength	输入最大值，
				size		输入最大长度，
				required	是否必须输入
				vld="{required:true,username:true,remote:'v_check_username.do',messages:{remote:'${usernameExist}'}}" 
					验证用户名是否存在，不存在的话，对应form外需要有一个对应名称未usernameExist的区域显示错误信息。
					如：<#assign usernameExist><@s.m "error.usernameExist"/></#assign>
				
<@p.tr/>		换行


<@p.td colspan="2" width="50" label="cms.department">
	需要一行通行显示的情况下，使用这种，其他的默认是一行有两列
	只需要显示一个标题的情况下也可以使用这种情况
</@p.td>

<@p.td colspan="2"><@p.submit code="global.submit"/> &nbsp; <@p.reset code="global.reset"/></@p.td>
提交和重置功能
=============================================================

========================后台action、service、dao、xml添加到执行列表中===========================

action的添加位置在：\WebContent\WEB-INF\config\jeecms\jeecms-servlet-admin-action.xml
service和dao的添加位置在：\WebContent\WEB-INF\config\jeecms\jeecms-context.xml
xml的添加位置在：\WebContent\WEB-INF\config\jdbc.properties

=================================前端Action存放位置和拦截器================================

前台的访问的action存放在：src\com\jeecms\cms\action\front
前台的拦截器有两个为：
	FrontContextInterceptor.java
	FrontLocaleInterceptor.java
	都继承自HandlerInterceptorAdapter（org.springframework.web.servlet.handler.HandlerInterceptorAdapter，这是抽象类）

=================================日志的打印修改======================================

修改\src\logback.xml里面的
	<root>
		<level value="error" /><!-- 修改为debug或者info -->
		<appender-ref ref="STDOUT" />
	</root>

================================================================================


弹出层的方式：
	<div id="departDialog" title="<@s.m "cms.department"/>(${site.name})" style="display:none;">
	    <ul id="departTree" class="filetree"></ul>
	</div>
	加载机构树：
	//部门对话框
	$("#departDialog").dialog({
		autoOpen: false,
		modal: true,
		width: 280,
		height: 420,
		position: ["center",20],
		buttons: {
			"OK": function() {
				$("#departId").val($("input[name='departId']:checked").val());
				$("#departName").val($("input[name='departId']:checked+span").html());
				$(this).dialog("close");
			}
		}
	});
	var parent_opened = false;
	$('#depart').click(function(){
		//第一次打开，需要获取数据。
		if(!parent_opened) {
			$("#departTree").treeview({
				url: "v_depart_add.do"
			});
			parent_opened = true;
			$("#departDialog").show();
		}
		$('#departDialog').dialog('open');
		return false;
	});	

